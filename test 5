import cv2
import cv2.aruco as aruco
import numpy as np
import math
import time

# Iniciar captura de video
cap = cv2.VideoCapture(1)  # Ajusta a 0, 1 o 2 según tu cámara

# Crear el diccionario y el detector de ArUco con la nueva API
aruco_dict = aruco.getPredefinedDictionary(aruco.DICT_4X4_50)
parameters = aruco.DetectorParameters()
detector = aruco.ArucoDetector(aruco_dict, parameters)

# Archivo para guardar los ángulos
archivo_angulos = "angulos_detectados.txt"
with open(archivo_angulos, "w") as f:
    f.write("ID | Ángulo 1 (p1→p2→p3) | Ángulo 2 (p2→p3→p4)\n")
    f.write("---------------------------------------------\n")

# Persistencia
TIEMPO_ESPERA = 2  # segundos
ultimos_centros = {}    # {id: [puntos]}
tiempos_centros = {}    # {id: [timestamps]}

# Función para calcular ángulo entre tres puntos
def calcular_angulo_360(p1, p2, p3):
    v1 = np.array(p1) - np.array(p2)
    v2 = np.array(p3) - np.array(p2)
    angulo_rad = math.atan2(v2[1], v2[0]) - math.atan2(v1[1], v1[0])
    angulo_deg = math.degrees(angulo_rad)
    return int(round(angulo_deg + 360)) % 360

while True:
    ret, frame = cap.read()
    if not ret:
        print("No se pudo leer el fotograma")
        break

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    corners, ids, _ = detector.detectMarkers(gray)

    tiempo_actual = time.time()
    marcadores_actuales = {}

    if ids is not None:
        aruco.drawDetectedMarkers(frame, corners, ids)

        for i, marker_id in enumerate(ids.flatten()):
            c = corners[i][0]
            cX, cY = int(np.mean(c[:, 0])), int(np.mean(c[:, 1]))

            if marker_id not in marcadores_actuales:
                marcadores_actuales[marker_id] = []
            marcadores_actuales[marker_id].append(((cX, cY), tiempo_actual))

            # Dibujar marcador
            cv2.circle(frame, (cX, cY), 5, (0, 255, 0), -1)
            cv2.putText(frame, f"ID:{marker_id}", (cX + 10, cY - 10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

    # Actualizar historial con persistencia
    for marker_id in set(list(ultimos_centros.keys()) + list(marcadores_actuales.keys())):
        if marker_id not in ultimos_centros:
            ultimos_centros[marker_id] = []
            tiempos_centros[marker_id] = []

        # Añadir nuevas detecciones
        if marker_id in marcadores_actuales:
            for punto, t in marcadores_actuales[marker_id]:
                ultimos_centros[marker_id].append(punto)
                tiempos_centros[marker_id].append(t)

        # Filtrar los puntos que siguen siendo válidos
        nuevos_puntos, nuevos_tiempos = [], []
        for punto, t in zip(ultimos_centros[marker_id], tiempos_centros[marker_id]):
            if tiempo_actual - t <= TIEMPO_ESPERA:
                nuevos_puntos.append(punto)
                nuevos_tiempos.append(t)
        ultimos_centros[marker_id] = nuevos_puntos
        tiempos_centros[marker_id] = nuevos_tiempos

        # Solo operar si hay al menos 2 puntos
        if len(nuevos_puntos) > 1:
            # Ordenar de arriba a abajo
            puntos_ordenados = sorted(nuevos_puntos, key=lambda p: p[1])

            # Dibujar líneas entre puntos consecutivos
            for i in range(len(puntos_ordenados) - 1):
                cv2.line(frame, puntos_ordenados[i], puntos_ordenados[i + 1], (0, 255, 255), 2)

            # Dibujar círculos y texto en orden
            for idx, punto in enumerate(puntos_ordenados):
                cv2.circle(frame, punto, 5, (255, 0, 255), -1)
                #cv2.putText(frame, f"{idx}", (punto[0] + 5, punto[1] + 5),
                            #cv2.FONT_HERSHEY_SIMPLEX, 2, (255, 255, 0), 2)

            # Si hay exactamente 4 puntos, calcular ángulos
            if len(puntos_ordenados) == 4:
                p1, p2, p3, p4 = puntos_ordenados
                angulo1 = calcular_angulo_360(p1, p2, p3)
                angulo2 = calcular_angulo_360(p2, p3, p4)

                # Mostrar ángulos
                cv2.putText(frame, f"{angulo1}°", p2,
                            cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 255), 2)
                cv2.putText(frame, f"{angulo2}°", p3,
                            cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 255), 2)

                # Guardar en archivo
                with open(archivo_angulos, "a") as f:
                    f.write(f"{marker_id} | {angulo1:>17} | {angulo2:>17}\n")

    cv2.imshow("Detección de ArUco", frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
