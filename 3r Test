import cv2
import cv2.aruco as aruco
import numpy as np

# Iniciar captura de video
cap = cv2.VideoCapture(1)  # Cambia a 0, 1 o 2 según la cámara disponible

# Crear el diccionario y el detector de ArUco con la nueva API
aruco_dict = aruco.getPredefinedDictionary(aruco.DICT_4X4_50)
parameters = aruco.DetectorParameters()
detector = aruco.ArucoDetector(aruco_dict, parameters)

while True:
    ret, frame = cap.read()
    if not ret:
        print("No se pudo leer el fotograma")
        break

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    
    # Detectar marcadores ArUco
    corners, ids, _ = detector.detectMarkers(gray)

    # Diccionario para almacenar los centros por ID
    centros_por_id = {}

    if ids is not None:
        # Dibujar todos los marcadores detectados
        aruco.drawDetectedMarkers(frame, corners, ids)

        # Recorrer los marcadores detectados
        for i, marker_id in enumerate(ids.flatten()):
            # Calcular el centro de cada marcador
            c = corners[i][0]
            cX = int(np.mean(c[:, 0]))
            cY = int(np.mean(c[:, 1]))

            # Si el ID ya está en el diccionario, añadimos el centro
            if marker_id not in centros_por_id:
                centros_por_id[marker_id] = []
            centros_por_id[marker_id].append((cX, cY))

            # Dibujar el centro
            cv2.circle(frame, (cX, cY), 5, (0, 255, 0), -1)
            cv2.putText(frame, f"ID:{marker_id}", (cX + 10, cY - 10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

        # Dibujar las líneas para los grupos de 3 ArUcos con el mismo ID
        for marker_id, centros in centros_por_id.items():
            if len(centros) >= 3:
                # Si hay 3 o más centros con el mismo ID, dibujamos una línea
                for i in range(len(centros) - 2):  # Asegurarnos de que al menos 3 están disponibles
                    pts = np.array(centros[i:i+3], np.int32).reshape((-1, 1, 2))
                    cv2.polylines(frame, [pts], False, (255, 0, 0), 2)

    cv2.imshow("Detección de ArUco", frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
